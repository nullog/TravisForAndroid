/*
 * Copyright 2015 Guillermo Orellana Ruiz
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * To use this gradle script, apply it from the project you want to use it for,
 * e.g.
 *
 * apply from: '../path/to/lint-summary.gradle'
 *
 * Invocations to any linting tasks will subsequently call to
 * `android-lint-summary` and display the output of it at the end of the full
 * build.
 */

task hasLintSummaryExecutable(type: Exec) {
    commandLine "which", "android-lint-summary"
    ignoreExitValue true

    ext.hasExecutable = {
        execResult?.getExitValue() == 0
    }
}

task lintSummary(type: LintSummaryTask, dependsOn: hasLintSummaryExecutable) {
    description "Print a summary of your lint issues"
    group JavaBasePlugin.VERIFICATION_GROUP

    outputs.upToDateWhen { false }
    onlyIf { gradle.startParameter.colorOutput && hasLintSummaryExecutable.hasExecutable() }
}


afterEvaluate {
    tasks.withType(tasks['lint'].class) {
        finalizedBy lintSummary
    }

    gradle.addBuildListener lintSummary
}

class LintSummaryTask extends DefaultTask implements BuildListenerAdapter {
    def stdout = new ByteArrayOutputStream()

    @SuppressWarnings("GroovyUnusedDeclaration")
    @TaskAction
    public def action() {
        def filePath = project.android.lintOptions.xmlOutput

        if (filePath == null) {
            // A best guess. There's a createOutputPath() in
            // com.android.build.gradle.internal.dsl.LintOptions that's used to generate the full
            // variant-specific output name, but I'd prefer to get the options object instead
            // somehow.
            filePath = [project.projectDir, "build", "outputs", "lint-results.xml"].join(File.separator)
        }
        project.exec {
            commandLine "bash", "-c", "android-lint-summary", "-v", filePath
            standardOutput = stdout
        }
    }

    @Override
    void buildFinished(BuildResult result) {
        println stdout.toString()

        if (state.skipped) {
            println """
For prettier display of lint errors, install `android-lint-summary`.
            """.stripMargin()
        }
    }
}

trait BuildListenerAdapter implements BuildListener {
    @Override
    void buildFinished(BuildResult result) {

    }

    @Override
    void buildStarted(Gradle gradle) {

    }

    @Override
    void projectsEvaluated(Gradle gradle) {

    }

    @Override
    void projectsLoaded(Gradle gradle) {

    }

    @Override
    void settingsEvaluated(Settings settings) {

    }
}
